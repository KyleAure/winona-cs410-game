/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.winona.cs.temp;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import edu.winona.cs.gamelogic.Cell;

import java.util.ArrayList;
import java.util.List;

/**
 *FIXME - Remove this class and package, just for testing.
 */
public class GUI extends javax.swing.JFrame {
	private static final long serialVersionUID = -2097350155286375640L;
	public static final int WINDOW_MIN_X = 240;
    public static final int WINDOW_MIN_Y = 200;

    public static final int COLS = 4;
    public static final int ROWS = 4;
    public static final int HGAP = 3;
    public static final int VGAP = 3;

    public static final int NUMBER_OF_CELLS = ROWS * COLS;

    private final JFrame frame;
    private final List<Cell> buttons = new ArrayList<>();
    private final List<Cell> correct = new ArrayList<>();
    private Cell emptyButton;

    private int movesCounter;

    /**
     * Creates new form GUI
     */
    public GUI() {
        
        frame = new JFrame("Slide Game");

        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        frame.setMinimumSize(new Dimension (WINDOW_MIN_X, WINDOW_MIN_Y));
        
        frame.setLayout (new GridLayout (ROWS, COLS, HGAP, VGAP));

        for( Integer i = NUMBER_OF_CELLS-1; i >= 0 ; i-- ) {
            createCell (i);
        }

        emptyButton = buttons.get (NUMBER_OF_CELLS-1);

        frame.setVisible(true);
        frame.pack();

        setVictoryCondition();
        initComponents();
    }
    
     public void actionPerformed (ActionEvent e) {
        if (checkNeighbour((Cell)e.getSource())) {
            swap ((Cell)e.getSource());
            movesCounter++;
            checkVictory ();
        } else {
            Toolkit.getDefaultToolkit().beep();
        }
    }
     
    private void createCell (int v) {
        Cell c = new Cell (v);
        c.addActionListener(
            (ActionEvent e) -> {actionPerformed(e);}
        );
        buttons.add(c);
        frame.add(c);
    }
    
    private boolean checkNeighbour (Cell c) {
        int x = Math.abs(c.getCol() - emptyButton.getCol());
        int y = Math.abs(c.getRow() - emptyButton.getRow());

        if (!(x == 0 && y == 1 || y == 0 && x == 1)) {
            return false;
        }

        return true;
    }
    
    private void swap (Cell c) {
        // swap c and empty
        String tmp = emptyButton.getText ();
        emptyButton.setText (c.getText ());
        c.setText (tmp);

        // update reference to empty button
        emptyButton = c;
    }
    
    private void setVictoryCondition () {
        for (Integer i = 1; i < NUMBER_OF_CELLS; i++) {
            correct.add (new Cell (i));
        }
        correct.add(new Cell (0));
    }
    
     private void checkVictory () {        
        for (int i = 0; i < NUMBER_OF_CELLS; i++) {
            if (!(buttons.get(i).getText ().equals( correct.get(i).getText ()))) {
                return;
            }
        }

        JOptionPane.showMessageDialog(null, "You achieved victory in " + movesCounter + " moves.",
            "Congratulations!", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
